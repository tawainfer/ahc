using System.Buffers;
using System.Diagnostics;
using System.Text;
using System.Timers;

// using System.Text.Json;
using static System.Console;

public static class Extensions
{
    private static Random r = new Random();

    public static void Shuffle<T>(this IList<T> v)
    {
        for (int i = v.Count - 1; i > 0; i--)
        {
            int j = r.Next(0, i + 1);
            var tmp = v[i];
            v[i] = v[j];
            v[j] = tmp;
        }
    }
}

// public static class DeepCopy
// {
//     public static T Clone<T>(T obj)
//     {
//         ReadOnlySpan<byte> bytes = JsonSerializer.SerializeToUtf8Bytes<T>(obj);
//         return JsonSerializer.Deserialize<T>(bytes)!;
//     }
// }

public static class SharedStopwatch
{
    private static Stopwatch _stopwatch = new Stopwatch();
    private static double _frequency = Stopwatch.Frequency;

    public static void Start() => _stopwatch.Start();
    public static void Stop() => _stopwatch.Stop();
    public static void Reset() => _stopwatch.Reset();
    public static long ElapsedMilliseconds() => _stopwatch.ElapsedMilliseconds;
    public static long ElapsedMicroseconds() => (long)(_stopwatch.ElapsedTicks / _frequency * 1_000_000);
}


public static class StaticData
{
    private const string ReachableCellData5 = """
        -15 0
        3000
        -14 -1
        3003
        -14 1
        3001
        -13 -2
        3031
        -13 0
        3002
        -13 2
        3013
        -12 -3
        3030
        -12 -1
        3032
        -12 1
        3012
        -12 3
        3010
        -11 -4
        3310
        -11 -2
        3033
        -11 0
        3022
        -11 2
        3011
        -11 4
        3130
        -10 -5
        3313
        -10 -3
        3311
        -10 -1
        3021
        -10 1
        3023
        -10 3
        3133
        -10 5
        3131
        -9 -6
        3301
        -9 -4
        3312
        -9 -2
        3323
        -9 0
        3020
        -9 2
        3121
        -9 4
        3132
        -9 6
        3103
        -8 -7
        3300
        -8 -5
        3302
        -8 -3
        3322
        -8 -1
        3320
        -8 1
        3120
        -8 3
        3122
        -8 5
        3102
        -8 7
        3100
        -7 -8
        2100
        -7 -6
        3303
        -7 -4
        3332
        -7 -2
        3321
        -7 0
        3220
        -7 2
        3123
        -7 4
        3112
        -7 6
        3101
        -7 8
        0300
        -6 -9
        2103
        -6 -7
        2101
        -6 -5
        3331
        -6 -3
        3333
        -6 -1
        3223
        -6 1
        3221
        -6 3
        3111
        -6 5
        3113
        -6 7
        0303
        -6 9
        0301
        -5 -10
        2131
        -5 -8
        2102
        -5 -6
        2113
        -5 -4
        3330
        -5 -2
        3211
        -5 0
        3222
        -5 2
        3233
        -5 4
        3110
        -5 6
        0331
        -5 8
        0302
        -5 10
        0313
        -4 -11
        2130
        -4 -9
        2132
        -4 -7
        2112
        -4 -5
        2110
        -4 -3
        3210
        -4 -1
        3212
        -4 1
        3232
        -4 3
        3230
        -4 5
        0330
        -4 7
        0332
        -4 9
        0312
        -4 11
        0310
        -3 -12
        2010
        -3 -10
        2133
        -3 -8
        2122
        -3 -6
        2111
        -3 -4
        2230
        -3 -2
        3213
        -3 0
        3202
        -3 2
        3231
        -3 4
        0210
        -3 6
        0333
        -3 8
        0322
        -3 10
        0311
        -3 12
        0030
        -2 -13
        2013
        -2 -11
        2011
        -2 -9
        2121
        -2 -7
        2123
        -2 -5
        2233
        -2 -3
        2231
        -2 -1
        3201
        -2 1
        3203
        -2 3
        0213
        -2 5
        0211
        -2 7
        0321
        -2 9
        0323
        -2 11
        0033
        -2 13
        0031
        -1 -14
        2001
        -1 -12
        2012
        -1 -10
        2023
        -1 -8
        2120
        -1 -6
        2221
        -1 -4
        2232
        -1 -2
        2203
        -1 0
        3200
        -1 2
        0201
        -1 4
        0212
        -1 6
        0223
        -1 8
        0320
        -1 10
        0021
        -1 12
        0032
        -1 14
        0003
        0 -15
        2000
        0 -13
        2002
        0 -11
        2022
        0 -9
        2020
        0 -7
        2220
        0 -5
        2222
        0 -3
        2202
        0 -1
        2200
        0 1
        0200
        0 3
        0202
        0 5
        0222
        0 7
        0220
        0 9
        0020
        0 11
        0022
        0 13
        0002
        0 15
        0000
        1 -14
        2003
        1 -12
        2032
        1 -10
        2021
        1 -8
        2320
        1 -6
        2223
        1 -4
        2212
        1 -2
        2201
        1 0
        1200
        1 2
        0203
        1 4
        0232
        1 6
        0221
        1 8
        0120
        1 10
        0023
        1 12
        0012
        1 14
        0001
        2 -13
        2031
        2 -11
        2033
        2 -9
        2323
        2 -7
        2321
        2 -5
        2211
        2 -3
        2213
        2 -1
        1203
        2 1
        1201
        2 3
        0231
        2 5
        0233
        2 7
        0123
        2 9
        0121
        2 11
        0011
        2 13
        0013
        3 -12
        2030
        3 -10
        2311
        3 -8
        2322
        3 -6
        2333
        3 -4
        2210
        3 -2
        1231
        3 0
        1202
        3 2
        1213
        3 4
        0230
        3 6
        0111
        3 8
        0122
        3 10
        0133
        3 12
        0010
        4 -11
        2310
        4 -9
        2312
        4 -7
        2332
        4 -5
        2330
        4 -3
        1230
        4 -1
        1232
        4 1
        1212
        4 3
        1210
        4 5
        0110
        4 7
        0112
        4 9
        0132
        4 11
        0130
        5 -10
        2313
        5 -8
        2302
        5 -6
        2331
        5 -4
        1110
        5 -2
        1233
        5 0
        1222
        5 2
        1211
        5 4
        1330
        5 6
        0113
        5 8
        0102
        5 10
        0131
        6 -9
        2301
        6 -7
        2303
        6 -5
        1113
        6 -3
        1111
        6 -1
        1221
        6 1
        1223
        6 3
        1333
        6 5
        1331
        6 7
        0101
        6 9
        0103
        7 -8
        2300
        7 -6
        1101
        7 -4
        1112
        7 -2
        1123
        7 0
        1220
        7 2
        1321
        7 4
        1332
        7 6
        1303
        7 8
        0100
        8 -7
        1100
        8 -5
        1102
        8 -3
        1122
        8 -1
        1120
        8 1
        1320
        8 3
        1322
        8 5
        1302
        8 7
        1300
        9 -6
        1103
        9 -4
        1132
        9 -2
        1121
        9 0
        1020
        9 2
        1323
        9 4
        1312
        9 6
        1301
        10 -5
        1131
        10 -3
        1133
        10 -1
        1023
        10 1
        1021
        10 3
        1311
        10 5
        1313
        11 -4
        1130
        11 -2
        1011
        11 0
        1022
        11 2
        1033
        11 4
        1310
        12 -3
        1010
        12 -1
        1012
        12 1
        1032
        12 3
        1030
        13 -2
        1013
        13 0
        1002
        13 2
        1031
        14 -1
        1001
        14 1
        1003
        15 0
        1000
        """;

    private const string ReachableCellData6 = """
        -31 0
        30000
        -30 -1
        30003
        -30 1
        30001
        -29 -2
        30031
        -29 0
        30002
        -29 2
        30013
        -28 -3
        30030
        -28 -1
        30032
        -28 1
        30012
        -28 3
        30010
        -27 -4
        30310
        -27 -2
        30033
        -27 0
        30022
        -27 2
        30011
        -27 4
        30130
        -26 -5
        30313
        -26 -3
        30311
        -26 -1
        30021
        -26 1
        30023
        -26 3
        30133
        -26 5
        30131
        -25 -6
        30301
        -25 -4
        30312
        -25 -2
        30323
        -25 0
        30020
        -25 2
        30121
        -25 4
        30132
        -25 6
        30103
        -24 -7
        30300
        -24 -5
        30302
        -24 -3
        30322
        -24 -1
        30320
        -24 1
        30120
        -24 3
        30122
        -24 5
        30102
        -24 7
        30100
        -23 -8
        33100
        -23 -6
        30303
        -23 -4
        30332
        -23 -2
        30321
        -23 0
        30220
        -23 2
        30123
        -23 4
        30112
        -23 6
        30101
        -23 8
        31300
        -22 -9
        33103
        -22 -7
        33101
        -22 -5
        30331
        -22 -3
        30333
        -22 -1
        30223
        -22 1
        30221
        -22 3
        30111
        -22 5
        30113
        -22 7
        31303
        -22 9
        31301
        -21 -10
        33131
        -21 -8
        33102
        -21 -6
        33113
        -21 -4
        30330
        -21 -2
        30211
        -21 0
        30222
        -21 2
        30233
        -21 4
        30110
        -21 6
        31331
        -21 8
        31302
        -21 10
        31313
        -20 -11
        33130
        -20 -9
        33132
        -20 -7
        33112
        -20 -5
        33110
        -20 -3
        30210
        -20 -1
        30212
        -20 1
        30232
        -20 3
        30230
        -20 5
        31330
        -20 7
        31332
        -20 9
        31312
        -20 11
        31310
        -19 -12
        33010
        -19 -10
        33133
        -19 -8
        33122
        -19 -6
        33111
        -19 -4
        33230
        -19 -2
        30213
        -19 0
        30202
        -19 2
        30231
        -19 4
        31210
        -19 6
        31333
        -19 8
        31322
        -19 10
        31311
        -19 12
        31030
        -18 -13
        33013
        -18 -11
        33011
        -18 -9
        33121
        -18 -7
        33123
        -18 -5
        33233
        -18 -3
        33231
        -18 -1
        30201
        -18 1
        30203
        -18 3
        31213
        -18 5
        31211
        -18 7
        31321
        -18 9
        31323
        -18 11
        31033
        -18 13
        31031
        -17 -14
        33001
        -17 -12
        33012
        -17 -10
        33023
        -17 -8
        33120
        -17 -6
        33221
        -17 -4
        33232
        -17 -2
        33203
        -17 0
        30200
        -17 2
        31201
        -17 4
        31212
        -17 6
        31223
        -17 8
        31320
        -17 10
        31021
        -17 12
        31032
        -17 14
        31003
        -16 -15
        33000
        -16 -13
        33002
        -16 -11
        33022
        -16 -9
        33020
        -16 -7
        33220
        -16 -5
        33222
        -16 -3
        33202
        -16 -1
        33200
        -16 1
        31200
        -16 3
        31202
        -16 5
        31222
        -16 7
        31220
        -16 9
        31020
        -16 11
        31022
        -16 13
        31002
        -16 15
        31000
        -15 -16
        21000
        -15 -14
        33003
        -15 -12
        33032
        -15 -10
        33021
        -15 -8
        33320
        -15 -6
        33223
        -15 -4
        33212
        -15 -2
        33201
        -15 0
        32200
        -15 2
        31203
        -15 4
        31232
        -15 6
        31221
        -15 8
        31120
        -15 10
        31023
        -15 12
        31012
        -15 14
        31001
        -15 16
        03000
        -14 -17
        21003
        -14 -15
        21001
        -14 -13
        33031
        -14 -11
        33033
        -14 -9
        33323
        -14 -7
        33321
        -14 -5
        33211
        -14 -3
        33213
        -14 -1
        32203
        -14 1
        32201
        -14 3
        31231
        -14 5
        31233
        -14 7
        31123
        -14 9
        31121
        -14 11
        31011
        -14 13
        31013
        -14 15
        03003
        -14 17
        03001
        -13 -18
        21031
        -13 -16
        21002
        -13 -14
        21013
        -13 -12
        33030
        -13 -10
        33311
        -13 -8
        33322
        -13 -6
        33333
        -13 -4
        33210
        -13 -2
        32231
        -13 0
        32202
        -13 2
        32213
        -13 4
        31230
        -13 6
        31111
        -13 8
        31122
        -13 10
        31133
        -13 12
        31010
        -13 14
        03031
        -13 16
        03002
        -13 18
        03013
        -12 -19
        21030
        -12 -17
        21032
        -12 -15
        21012
        -12 -13
        21010
        -12 -11
        33310
        -12 -9
        33312
        -12 -7
        33332
        -12 -5
        33330
        -12 -3
        32230
        -12 -1
        32232
        -12 1
        32212
        -12 3
        32210
        -12 5
        31110
        -12 7
        31112
        -12 9
        31132
        -12 11
        31130
        -12 13
        03030
        -12 15
        03032
        -12 17
        03012
        -12 19
        03010
        -11 -20
        21310
        -11 -18
        21033
        -11 -16
        21022
        -11 -14
        21011
        -11 -12
        21130
        -11 -10
        33313
        -11 -8
        33302
        -11 -6
        33331
        -11 -4
        32110
        -11 -2
        32233
        -11 0
        32222
        -11 2
        32211
        -11 4
        32330
        -11 6
        31113
        -11 8
        31102
        -11 10
        31131
        -11 12
        03310
        -11 14
        03033
        -11 16
        03022
        -11 18
        03011
        -11 20
        03130
        -10 -21
        21313
        -10 -19
        21311
        -10 -17
        21021
        -10 -15
        21023
        -10 -13
        21133
        -10 -11
        21131
        -10 -9
        33301
        -10 -7
        33303
        -10 -5
        32113
        -10 -3
        32111
        -10 -1
        32221
        -10 1
        32223
        -10 3
        32333
        -10 5
        32331
        -10 7
        31101
        -10 9
        31103
        -10 11
        03313
        -10 13
        03311
        -10 15
        03021
        -10 17
        03023
        -10 19
        03133
        -10 21
        03131
        -9 -22
        21301
        -9 -20
        21312
        -9 -18
        21323
        -9 -16
        21020
        -9 -14
        21121
        -9 -12
        21132
        -9 -10
        21103
        -9 -8
        33300
        -9 -6
        32101
        -9 -4
        32112
        -9 -2
        32123
        -9 0
        32220
        -9 2
        32321
        -9 4
        32332
        -9 6
        32303
        -9 8
        31100
        -9 10
        03301
        -9 12
        03312
        -9 14
        03323
        -9 16
        03020
        -9 18
        03121
        -9 20
        03132
        -9 22
        03103
        -8 -23
        21300
        -8 -21
        21302
        -8 -19
        21322
        -8 -17
        21320
        -8 -15
        21120
        -8 -13
        21122
        -8 -11
        21102
        -8 -9
        21100
        -8 -7
        32100
        -8 -5
        32102
        -8 -3
        32122
        -8 -1
        32120
        -8 1
        32320
        -8 3
        32322
        -8 5
        32302
        -8 7
        32300
        -8 9
        03300
        -8 11
        03302
        -8 13
        03322
        -8 15
        03320
        -8 17
        03120
        -8 19
        03122
        -8 21
        03102
        -8 23
        03100
        -7 -24
        20100
        -7 -22
        21303
        -7 -20
        21332
        -7 -18
        21321
        -7 -16
        21220
        -7 -14
        21123
        -7 -12
        21112
        -7 -10
        21101
        -7 -8
        22300
        -7 -6
        32103
        -7 -4
        32132
        -7 -2
        32121
        -7 0
        32020
        -7 2
        32323
        -7 4
        32312
        -7 6
        32301
        -7 8
        02100
        -7 10
        03303
        -7 12
        03332
        -7 14
        03321
        -7 16
        03220
        -7 18
        03123
        -7 20
        03112
        -7 22
        03101
        -7 24
        00300
        -6 -25
        20103
        -6 -23
        20101
        -6 -21
        21331
        -6 -19
        21333
        -6 -17
        21223
        -6 -15
        21221
        -6 -13
        21111
        -6 -11
        21113
        -6 -9
        22303
        -6 -7
        22301
        -6 -5
        32131
        -6 -3
        32133
        -6 -1
        32023
        -6 1
        32021
        -6 3
        32311
        -6 5
        32313
        -6 7
        02103
        -6 9
        02101
        -6 11
        03331
        -6 13
        03333
        -6 15
        03223
        -6 17
        03221
        -6 19
        03111
        -6 21
        03113
        -6 23
        00303
        -6 25
        00301
        -5 -26
        20131
        -5 -24
        20102
        -5 -22
        20113
        -5 -20
        21330
        -5 -18
        21211
        -5 -16
        21222
        -5 -14
        21233
        -5 -12
        21110
        -5 -10
        22331
        -5 -8
        22302
        -5 -6
        22313
        -5 -4
        32130
        -5 -2
        32011
        -5 0
        32022
        -5 2
        32033
        -5 4
        32310
        -5 6
        02131
        -5 8
        02102
        -5 10
        02113
        -5 12
        03330
        -5 14
        03211
        -5 16
        03222
        -5 18
        03233
        -5 20
        03110
        -5 22
        00331
        -5 24
        00302
        -5 26
        00313
        -4 -27
        20130
        -4 -25
        20132
        -4 -23
        20112
        -4 -21
        20110
        -4 -19
        21210
        -4 -17
        21212
        -4 -15
        21232
        -4 -13
        21230
        -4 -11
        22330
        -4 -9
        22332
        -4 -7
        22312
        -4 -5
        22310
        -4 -3
        32010
        -4 -1
        32012
        -4 1
        32032
        -4 3
        32030
        -4 5
        02130
        -4 7
        02132
        -4 9
        02112
        -4 11
        02110
        -4 13
        03210
        -4 15
        03212
        -4 17
        03232
        -4 19
        03230
        -4 21
        00330
        -4 23
        00332
        -4 25
        00312
        -4 27
        00310
        -3 -28
        20010
        -3 -26
        20133
        -3 -24
        20122
        -3 -22
        20111
        -3 -20
        20230
        -3 -18
        21213
        -3 -16
        21202
        -3 -14
        21231
        -3 -12
        22210
        -3 -10
        22333
        -3 -8
        22322
        -3 -6
        22311
        -3 -4
        22030
        -3 -2
        32013
        -3 0
        32002
        -3 2
        32031
        -3 4
        02010
        -3 6
        02133
        -3 8
        02122
        -3 10
        02111
        -3 12
        02230
        -3 14
        03213
        -3 16
        03202
        -3 18
        03231
        -3 20
        00210
        -3 22
        00333
        -3 24
        00322
        -3 26
        00311
        -3 28
        00030
        -2 -29
        20013
        -2 -27
        20011
        -2 -25
        20121
        -2 -23
        20123
        -2 -21
        20233
        -2 -19
        20231
        -2 -17
        21201
        -2 -15
        21203
        -2 -13
        22213
        -2 -11
        22211
        -2 -9
        22321
        -2 -7
        22323
        -2 -5
        22033
        -2 -3
        22031
        -2 -1
        32001
        -2 1
        32003
        -2 3
        02013
        -2 5
        02011
        -2 7
        02121
        -2 9
        02123
        -2 11
        02233
        -2 13
        02231
        -2 15
        03201
        -2 17
        03203
        -2 19
        00213
        -2 21
        00211
        -2 23
        00321
        -2 25
        00323
        -2 27
        00033
        -2 29
        00031
        -1 -30
        20001
        -1 -28
        20012
        -1 -26
        20023
        -1 -24
        20120
        -1 -22
        20221
        -1 -20
        20232
        -1 -18
        20203
        -1 -16
        21200
        -1 -14
        22201
        -1 -12
        22212
        -1 -10
        22223
        -1 -8
        22320
        -1 -6
        22021
        -1 -4
        22032
        -1 -2
        22003
        -1 0
        32000
        -1 2
        02001
        -1 4
        02012
        -1 6
        02023
        -1 8
        02120
        -1 10
        02221
        -1 12
        02232
        -1 14
        02203
        -1 16
        03200
        -1 18
        00201
        -1 20
        00212
        -1 22
        00223
        -1 24
        00320
        -1 26
        00021
        -1 28
        00032
        -1 30
        00003
        0 -31
        20000
        0 -29
        20002
        0 -27
        20022
        0 -25
        20020
        0 -23
        20220
        0 -21
        20222
        0 -19
        20202
        0 -17
        20200
        0 -15
        22200
        0 -13
        22202
        0 -11
        22222
        0 -9
        22220
        0 -7
        22020
        0 -5
        22022
        0 -3
        22002
        0 -1
        22000
        0 1
        02000
        0 3
        02002
        0 5
        02022
        0 7
        02020
        0 9
        02220
        0 11
        02222
        0 13
        02202
        0 15
        02200
        0 17
        00200
        0 19
        00202
        0 21
        00222
        0 23
        00220
        0 25
        00020
        0 27
        00022
        0 29
        00002
        0 31
        00000
        1 -30
        20003
        1 -28
        20032
        1 -26
        20021
        1 -24
        20320
        1 -22
        20223
        1 -20
        20212
        1 -18
        20201
        1 -16
        23200
        1 -14
        22203
        1 -12
        22232
        1 -10
        22221
        1 -8
        22120
        1 -6
        22023
        1 -4
        22012
        1 -2
        22001
        1 0
        12000
        1 2
        02003
        1 4
        02032
        1 6
        02021
        1 8
        02320
        1 10
        02223
        1 12
        02212
        1 14
        02201
        1 16
        01200
        1 18
        00203
        1 20
        00232
        1 22
        00221
        1 24
        00120
        1 26
        00023
        1 28
        00012
        1 30
        00001
        2 -29
        20031
        2 -27
        20033
        2 -25
        20323
        2 -23
        20321
        2 -21
        20211
        2 -19
        20213
        2 -17
        23203
        2 -15
        23201
        2 -13
        22231
        2 -11
        22233
        2 -9
        22123
        2 -7
        22121
        2 -5
        22011
        2 -3
        22013
        2 -1
        12003
        2 1
        12001
        2 3
        02031
        2 5
        02033
        2 7
        02323
        2 9
        02321
        2 11
        02211
        2 13
        02213
        2 15
        01203
        2 17
        01201
        2 19
        00231
        2 21
        00233
        2 23
        00123
        2 25
        00121
        2 27
        00011
        2 29
        00013
        3 -28
        20030
        3 -26
        20311
        3 -24
        20322
        3 -22
        20333
        3 -20
        20210
        3 -18
        23231
        3 -16
        23202
        3 -14
        23213
        3 -12
        22230
        3 -10
        22111
        3 -8
        22122
        3 -6
        22133
        3 -4
        22010
        3 -2
        12031
        3 0
        12002
        3 2
        12013
        3 4
        02030
        3 6
        02311
        3 8
        02322
        3 10
        02333
        3 12
        02210
        3 14
        01231
        3 16
        01202
        3 18
        01213
        3 20
        00230
        3 22
        00111
        3 24
        00122
        3 26
        00133
        3 28
        00010
        4 -27
        20310
        4 -25
        20312
        4 -23
        20332
        4 -21
        20330
        4 -19
        23230
        4 -17
        23232
        4 -15
        23212
        4 -13
        23210
        4 -11
        22110
        4 -9
        22112
        4 -7
        22132
        4 -5
        22130
        4 -3
        12030
        4 -1
        12032
        4 1
        12012
        4 3
        12010
        4 5
        02310
        4 7
        02312
        4 9
        02332
        4 11
        02330
        4 13
        01230
        4 15
        01232
        4 17
        01212
        4 19
        01210
        4 21
        00110
        4 23
        00112
        4 25
        00132
        4 27
        00130
        5 -26
        20313
        5 -24
        20302
        5 -22
        20331
        5 -20
        23110
        5 -18
        23233
        5 -16
        23222
        5 -14
        23211
        5 -12
        23330
        5 -10
        22113
        5 -8
        22102
        5 -6
        22131
        5 -4
        12310
        5 -2
        12033
        5 0
        12022
        5 2
        12011
        5 4
        12130
        5 6
        02313
        5 8
        02302
        5 10
        02331
        5 12
        01110
        5 14
        01233
        5 16
        01222
        5 18
        01211
        5 20
        01330
        5 22
        00113
        5 24
        00102
        5 26
        00131
        6 -25
        20301
        6 -23
        20303
        6 -21
        23113
        6 -19
        23111
        6 -17
        23221
        6 -15
        23223
        6 -13
        23333
        6 -11
        23331
        6 -9
        22101
        6 -7
        22103
        6 -5
        12313
        6 -3
        12311
        6 -1
        12021
        6 1
        12023
        6 3
        12133
        6 5
        12131
        6 7
        02301
        6 9
        02303
        6 11
        01113
        6 13
        01111
        6 15
        01221
        6 17
        01223
        6 19
        01333
        6 21
        01331
        6 23
        00101
        6 25
        00103
        7 -24
        20300
        7 -22
        23101
        7 -20
        23112
        7 -18
        23123
        7 -16
        23220
        7 -14
        23321
        7 -12
        23332
        7 -10
        23303
        7 -8
        22100
        7 -6
        12301
        7 -4
        12312
        7 -2
        12323
        7 0
        12020
        7 2
        12121
        7 4
        12132
        7 6
        12103
        7 8
        02300
        7 10
        01101
        7 12
        01112
        7 14
        01123
        7 16
        01220
        7 18
        01321
        7 20
        01332
        7 22
        01303
        7 24
        00100
        8 -23
        23100
        8 -21
        23102
        8 -19
        23122
        8 -17
        23120
        8 -15
        23320
        8 -13
        23322
        8 -11
        23302
        8 -9
        23300
        8 -7
        12300
        8 -5
        12302
        8 -3
        12322
        8 -1
        12320
        8 1
        12120
        8 3
        12122
        8 5
        12102
        8 7
        12100
        8 9
        01100
        8 11
        01102
        8 13
        01122
        8 15
        01120
        8 17
        01320
        8 19
        01322
        8 21
        01302
        8 23
        01300
        9 -22
        23103
        9 -20
        23132
        9 -18
        23121
        9 -16
        23020
        9 -14
        23323
        9 -12
        23312
        9 -10
        23301
        9 -8
        11100
        9 -6
        12303
        9 -4
        12332
        9 -2
        12321
        9 0
        12220
        9 2
        12123
        9 4
        12112
        9 6
        12101
        9 8
        13300
        9 10
        01103
        9 12
        01132
        9 14
        01121
        9 16
        01020
        9 18
        01323
        9 20
        01312
        9 22
        01301
        10 -21
        23131
        10 -19
        23133
        10 -17
        23023
        10 -15
        23021
        10 -13
        23311
        10 -11
        23313
        10 -9
        11103
        10 -7
        11101
        10 -5
        12331
        10 -3
        12333
        10 -1
        12223
        10 1
        12221
        10 3
        12111
        10 5
        12113
        10 7
        13303
        10 9
        13301
        10 11
        01131
        10 13
        01133
        10 15
        01023
        10 17
        01021
        10 19
        01311
        10 21
        01313
        11 -20
        23130
        11 -18
        23011
        11 -16
        23022
        11 -14
        23033
        11 -12
        23310
        11 -10
        11131
        11 -8
        11102
        11 -6
        11113
        11 -4
        12330
        11 -2
        12211
        11 0
        12222
        11 2
        12233
        11 4
        12110
        11 6
        13331
        11 8
        13302
        11 10
        13313
        11 12
        01130
        11 14
        01011
        11 16
        01022
        11 18
        01033
        11 20
        01310
        12 -19
        23010
        12 -17
        23012
        12 -15
        23032
        12 -13
        23030
        12 -11
        11130
        12 -9
        11132
        12 -7
        11112
        12 -5
        11110
        12 -3
        12210
        12 -1
        12212
        12 1
        12232
        12 3
        12230
        12 5
        13330
        12 7
        13332
        12 9
        13312
        12 11
        13310
        12 13
        01010
        12 15
        01012
        12 17
        01032
        12 19
        01030
        13 -18
        23013
        13 -16
        23002
        13 -14
        23031
        13 -12
        11010
        13 -10
        11133
        13 -8
        11122
        13 -6
        11111
        13 -4
        11230
        13 -2
        12213
        13 0
        12202
        13 2
        12231
        13 4
        13210
        13 6
        13333
        13 8
        13322
        13 10
        13311
        13 12
        13030
        13 14
        01013
        13 16
        01002
        13 18
        01031
        14 -17
        23001
        14 -15
        23003
        14 -13
        11013
        14 -11
        11011
        14 -9
        11121
        14 -7
        11123
        14 -5
        11233
        14 -3
        11231
        14 -1
        12201
        14 1
        12203
        14 3
        13213
        14 5
        13211
        14 7
        13321
        14 9
        13323
        14 11
        13033
        14 13
        13031
        14 15
        01001
        14 17
        01003
        15 -16
        23000
        15 -14
        11001
        15 -12
        11012
        15 -10
        11023
        15 -8
        11120
        15 -6
        11221
        15 -4
        11232
        15 -2
        11203
        15 0
        12200
        15 2
        13201
        15 4
        13212
        15 6
        13223
        15 8
        13320
        15 10
        13021
        15 12
        13032
        15 14
        13003
        15 16
        01000
        16 -15
        11000
        16 -13
        11002
        16 -11
        11022
        16 -9
        11020
        16 -7
        11220
        16 -5
        11222
        16 -3
        11202
        16 -1
        11200
        16 1
        13200
        16 3
        13202
        16 5
        13222
        16 7
        13220
        16 9
        13020
        16 11
        13022
        16 13
        13002
        16 15
        13000
        17 -14
        11003
        17 -12
        11032
        17 -10
        11021
        17 -8
        11320
        17 -6
        11223
        17 -4
        11212
        17 -2
        11201
        17 0
        10200
        17 2
        13203
        17 4
        13232
        17 6
        13221
        17 8
        13120
        17 10
        13023
        17 12
        13012
        17 14
        13001
        18 -13
        11031
        18 -11
        11033
        18 -9
        11323
        18 -7
        11321
        18 -5
        11211
        18 -3
        11213
        18 -1
        10203
        18 1
        10201
        18 3
        13231
        18 5
        13233
        18 7
        13123
        18 9
        13121
        18 11
        13011
        18 13
        13013
        19 -12
        11030
        19 -10
        11311
        19 -8
        11322
        19 -6
        11333
        19 -4
        11210
        19 -2
        10231
        19 0
        10202
        19 2
        10213
        19 4
        13230
        19 6
        13111
        19 8
        13122
        19 10
        13133
        19 12
        13010
        20 -11
        11310
        20 -9
        11312
        20 -7
        11332
        20 -5
        11330
        20 -3
        10230
        20 -1
        10232
        20 1
        10212
        20 3
        10210
        20 5
        13110
        20 7
        13112
        20 9
        13132
        20 11
        13130
        21 -10
        11313
        21 -8
        11302
        21 -6
        11331
        21 -4
        10110
        21 -2
        10233
        21 0
        10222
        21 2
        10211
        21 4
        10330
        21 6
        13113
        21 8
        13102
        21 10
        13131
        22 -9
        11301
        22 -7
        11303
        22 -5
        10113
        22 -3
        10111
        22 -1
        10221
        22 1
        10223
        22 3
        10333
        22 5
        10331
        22 7
        13101
        22 9
        13103
        23 -8
        11300
        23 -6
        10101
        23 -4
        10112
        23 -2
        10123
        23 0
        10220
        23 2
        10321
        23 4
        10332
        23 6
        10303
        23 8
        13100
        24 -7
        10100
        24 -5
        10102
        24 -3
        10122
        24 -1
        10120
        24 1
        10320
        24 3
        10322
        24 5
        10302
        24 7
        10300
        25 -6
        10103
        25 -4
        10132
        25 -2
        10121
        25 0
        10020
        25 2
        10323
        25 4
        10312
        25 6
        10301
        26 -5
        10131
        26 -3
        10133
        26 -1
        10023
        26 1
        10021
        26 3
        10311
        26 5
        10313
        27 -4
        10130
        27 -2
        10011
        27 0
        10022
        27 2
        10033
        27 4
        10310
        28 -3
        10010
        28 -1
        10012
        28 1
        10032
        28 3
        10030
        29 -2
        10013
        29 0
        10002
        29 2
        10031
        30 -1
        10001
        30 1
        10003
        31 0
        10000
        """;

    public static Dictionary<(int Y, int X), int[]> CellToRotatePatterns { get; private set; }

    static StaticData()
    {
        CellToRotatePatterns = new();
    }

    public static void ParseReachableCellData(bool isNodeCountFive)
    {
        CellToRotatePatterns = new();
        string reachableCellData = (isNodeCountFive ? ReachableCellData5 : ReachableCellData6);
        string[] buf = reachableCellData.Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries);

        for (int t = 0; t < buf.Length / 2; t++)
        {
            int[] yx = buf[t * 2].Split().Select(int.Parse).ToArray();
            (int y, int x) = (yx[0], yx[1]);
            CellToRotatePatterns[(y, x)] = buf[t * 2 + 1].ToArray().Select(c => (int)(c - '0')).ToArray();
        }
    }
}

// public struct Coord
// {
//     public int Y { get; set; }
//     public int X { get; set; }

//     public Coord(in int y = 0, in int x = 0)
//     {
//         Y = y;
//         X = x;
//     }
// }

public class Node
{
    public int Y { get; set; }
    public int X { get; set; }
    public int Id { get; set; }
    public int? ParentId { get; set; }
    public bool IsFingertip { get; set; }
    public bool IsGrabbed { get; set; }
    public int RotatePattern { get; set; }

    public Node(int y, int x, int id, int? parentId, bool isFingertip, bool isGrabbed, int rotatePattern = 0)
    {
        Y = y;
        X = x;
        Id = id;
        ParentId = parentId;
        IsFingertip = isFingertip;
        IsGrabbed = isGrabbed;
        RotatePattern = rotatePattern;
    }

    public Node DeepCopy()
    {
        return new Node(Y, X, Id, ParentId, IsFingertip, IsGrabbed, RotatePattern);
    }

    public override string ToString()
    {
        StringBuilder sb = new();
        sb.Append($"id: {Id} ");
        sb.Append($"pid: {(ParentId is not null ? $"{ParentId}" : "x")} ");
        sb.Append($"({Y},{X}) ");
        sb.Append($"{(IsFingertip ? "Finger" : "")} ");
        sb.Append($"{(IsGrabbed ? "Grabbed" : "")} ");
        sb.Append($"RotatePattern: {RotatePattern}");
        return sb.ToString();
    }
}

public class RobotArm
{
    private Dictionary<int, HashSet<int>> _graph;
    private Dictionary<int, HashSet<int>> _subtree;
    private List<Node> _nodes;

    public int Y { get; private set; }
    public int X { get; private set; }
    public int NodeCount { get { return _nodes.Count; } }

    public RobotArm()
    {
        _graph = new();
        _graph[0] = new();
        _subtree = new();
        _subtree[0] = new() { 0, };
        _nodes = new() { new Node(0, 0, 0, null, true, false), };
        Y = 0;
        X = 0;
    }

    public Node this[int i]
    {
        get
        {
            return new Node(
                _nodes[i].Y + Y,
                _nodes[i].X + X,
                _nodes[i].Id,
                _nodes[i].ParentId,
                _nodes[i].IsFingertip,
                _nodes[i].IsGrabbed,
                _nodes[i].RotatePattern
            );
        }
    }

    public void SetRootPosition(int y, int x)
    {
        Y = y;
        X = x;
    }

    public RobotArm DeepCopy()
    {
        var copy = new RobotArm();

        copy._graph = new Dictionary<int, HashSet<int>>();
        foreach (var kvp in _graph)
        {
            copy._graph[kvp.Key] = new HashSet<int>(kvp.Value);
        }

        copy._subtree = new Dictionary<int, HashSet<int>>();
        foreach (var kvp in _subtree)
        {
            copy._subtree[kvp.Key] = new HashSet<int>(kvp.Value);
        }

        copy._nodes = new List<Node>();
        foreach (var node in _nodes)
        {
            copy._nodes.Add(node.DeepCopy());
        }

        copy.Y = Y;
        copy.X = X;

        return copy;
    }

    public void AddNode(int parentId, int length)
    {
        if (parentId >= _nodes.Count)
        {
            throw new Exception($"親ノードとして指定した頂点{parentId}は存在しません");
        }

        int id = _nodes.Count;
        _nodes.Add(new Node(
            _nodes[parentId].Y, _nodes[parentId].X + length, id, parentId, true, false
        ));
        _nodes[parentId].IsFingertip = false;
        if (!_graph.ContainsKey(id)) _graph[id] = new();
        _graph[id].Add(parentId);
        _graph[parentId].Add(id);

        Queue<int> q = new();
        q.Enqueue(id);
        while (q.Count >= 1)
        {
            int cp = q.Dequeue();
            if (!_subtree.ContainsKey(cp)) _subtree[cp] = new();
            _subtree[cp].Add(id);
            if (_nodes[cp].ParentId == null) break;
            q.Enqueue((int)_nodes[cp].ParentId!);
        }
    }

    public int GetNodeDistance(int id1, int id2)
    {
        return Math.Abs(_nodes[id1].Y - _nodes[id2].Y) + Math.Abs(_nodes[id1].X - _nodes[id2].X);
    }

    public void Move(int dy, int dx)
    {
        Y += dy;
        X += dx;
    }

    private (int Ey, int Ex) RotatePoint(int py, int px, int cy, int cx, bool isClockwise)
    {
        int ry = cy - py;
        int rx = cx - px;

        int dy, dx;
        if (isClockwise)
        {
            dy = rx;
            dx = -ry;
        }
        else
        {
            dy = -rx;
            dx = ry;
        }

        int ey = py + dy;
        int ex = px + dx;
        return (ey, ex);
    }

    public bool CanRotate(int id, bool isClockwise)
    {
        if (id < 0 || id >= _nodes.Count)
        {
            // throw new ArgumentException($"ノード{id}は存在しません");
            return false;
        }

        if (_nodes[id].ParentId is null)
        {
            // throw new ArgumentException($"ノード{id}に親ノードが存在しません");
            return false;
        }

        return true;
    }

    public void Rotate(int id, bool isClockwise)
    {
        if (!CanRotate(id, isClockwise))
        {
            throw new ArgumentException($"回転できません");
        }

        int py = _nodes[(int)_nodes[id].ParentId!].Y;
        int px = _nodes[(int)_nodes[id].ParentId!].X;
        foreach (int i in _subtree[id])
        {
            (_nodes[i].Y, _nodes[i].X) = RotatePoint(py, px, _nodes[i].Y, _nodes[i].X, isClockwise);
        }

        _nodes[id].RotatePattern = (_nodes[id].RotatePattern + (isClockwise ? 1 : -1) + 4) % 4;
    }

    public bool CanGrab(int id)
    {
        if (id < 0 || id >= _nodes.Count)
        {
            // throw new Exception($"ノード{id}は存在しません");
            return false;
        }

        if (!_nodes[id].IsFingertip)
        {
            // throw new Exception($"ノード{id}は指先ではありません");
            return false;
        }

        if (_nodes[id].IsGrabbed)
        {
            // throw new Exception($"ノード{id}は既に掴んだ状態です");
            return false;
        }

        return true;
    }

    public void Grab(int id)
    {
        if (!CanGrab(id))
        {
            throw new Exception("掴めません");
        }

        _nodes[id].IsGrabbed = true;
    }

    public bool CanPut(int id)
    {
        if (id < 0 || id >= _nodes.Count)
        {
            // throw new Exception($"ノード{id}は存在しません");
            return false;
        }

        if (!_nodes[id].IsFingertip)
        {
            // throw new Exception($"ノード{id}は指先ではありません");
            return false;
        }

        if (!_nodes[id].IsGrabbed)
        {
            // throw new Exception($"ノード{id}は置くものを持っていません");
            return false;
        }

        return true;
    }

    public void Put(int id)
    {
        if (!CanPut(id))
        {
            throw new Exception($"置けません");
        }

        _nodes[id].IsGrabbed = false;
    }

    public override string ToString()
    {
        StringBuilder sb = new();
        for (int i = 0; i < NodeCount; i++)
        {
            sb.AppendLine(this[i].ToString());
        }
        return sb.ToString();
    }
}

public struct Cell
{
    public int Y { get; set; }
    public int X { get; set; }
    public bool ItemExists { get; set; }
    public bool IsDestination { get; set; }

    public Cell(int y, int x, bool itemExists, bool isDestination)
    {
        Y = y;
        X = x;
        ItemExists = itemExists;
        IsDestination = isDestination;
    }

    public override string ToString()
    {
        return $"({Y},{X}) {(ItemExists ? "Item" : "")} {(IsDestination ? "Dest" : "")}";
    }
}

public class Field
{
    private int _n;
    private bool[,] _current;
    private readonly bool[,] _goal;
    // private HashSet<(int Y, int X)> _finished;
    // private HashSet<(int Y, int X)> _unfinished;
    private Dictionary<(bool ItemExists, bool IsDestination), HashSet<Cell>> _categorizedCell;
    private readonly RobotArm _arm;
    private readonly string _initLog;
    private List<char[]> _log;

    public int N { get { return _n; } }
    // public IReadOnlyCollection<(int Y, int X)> Finished { get { return _finished; } }
    // public IReadOnlyCollection<(int Y, int X)> Unfinished { get { return _unfinished; } }
    public int Turn { get { return _log.Count; } }

    public Field(int n, in bool[,] s, in bool[,] t, in RobotArm arm)
    {
        _n = n;

        // _finished = new();
        // _unfinished = new();
        _categorizedCell = new();

        _current = new bool[_n, _n];
        _goal = new bool[_n, _n];
        _categorizedCell[(false, false)] = new();
        _categorizedCell[(false, true)] = new();
        _categorizedCell[(true, false)] = new();
        _categorizedCell[(true, true)] = new();

        for (int i = 0; i < _n; i++)
        {
            for (int j = 0; j < _n; j++)
            {
                _current[i, j] = s[i, j];
                _goal[i, j] = t[i, j];
                _categorizedCell[(_current[i, j], _goal[i, j])].Add(this[i, j]);
            }
        }

        _arm = arm.DeepCopy();

        if (_arm.Y < 0 || _arm.Y >= n || _arm.X < 0 || _arm.X >= n)
        {
            throw new Exception($"アームがフィールドの範囲外に存在します");
        }

        StringBuilder sb = new();
        sb.AppendLine($"{_arm.NodeCount}");
        for (int i = 1; i < _arm.NodeCount; i++)
        {
            var node = _arm[i];
            sb.AppendLine($"{node.ParentId} {_arm.GetNodeDistance(i, (int)node.ParentId!)}");
        }
        sb.Append($"{_arm.Y} {_arm.X}");
        _initLog = sb.ToString();

        _log = new();
    }

    public Node this[int i] { get { return _arm[i]; } }

    public Cell this[int y, int x]
    {
        get
        {
            if (y < 0 || y >= N || x < 0 || x >= N)
            {
                return new Cell(y, x, false, false);
            }
            return new Cell(y, x, _current[y, x], _goal[y, x]);
        }
    }

    public IReadOnlyCollection<Cell> GetCategorizedCell(bool itemExists, bool isDestination)
    {
        return _categorizedCell[(itemExists, isDestination)];
    }

    private bool CanMoveArm(int dy, int dx)
    {
        int ny = _arm.Y + dy;
        int nx = _arm.X + dx;
        return (0 <= ny && ny < _n && 0 <= nx && nx < _n);
    }

    public bool CanMoveArm(char c)
    {
        switch (c)
        {
            case 'U':
                return CanMoveArm(-1, 0);
            case 'D':
                return CanMoveArm(1, 0);
            case 'L':
                return CanMoveArm(0, -1);
            case 'R':
                return CanMoveArm(0, 1);
            case '.':
                return true;
            default:
                throw new Exception($"不正な命令です({c})");
        }
    }

    private void MoveArm(int dy, int dx)
    {
        if (!CanMoveArm(dy, dx))
        {
            throw new Exception("範囲外に移動しました");
        }

        _arm.Move(dy, dx);
    }

    private void MoveArm(char c)
    {
        switch (c)
        {
            case 'U':
                MoveArm(-1, 0);
                break;
            case 'D':
                MoveArm(1, 0);
                break;
            case 'L':
                MoveArm(0, -1);
                break;
            case 'R':
                MoveArm(0, 1);
                break;
            case '.':
                // MoveArm(0, 0);
                break;
            default:
                throw new Exception($"不正な命令です({c})");
        }
    }

    public bool CanRotateArm(int id, bool isClockwise)
    {
        return _arm.CanRotate(id, isClockwise);
    }

    private void RotateArm(int id, bool isClockwise)
    {
        if (!CanRotateArm(id, isClockwise))
        {
            throw new Exception($"ノード{id}の部分木を回転できません");
        }

        _arm.Rotate(id, isClockwise);
    }

    public bool CanGrabArm(int id)
    {
        var node = _arm[id];
        (int y, int x) = (node.Y, node.X);

        if (y < 0 || y >= _n || x < 0 || x >= _n)
        {
            // throw new Exception($"ノード{id}はフィールドの範囲外に存在します");
            return false;
        }

        if (!_current[y, x])
        {
            // throw new Exception($"マス({y},{x})に掴めるものがありません");
            return false;
        }

        return _arm.CanGrab(id);
    }

    private void GrabArm(int id)
    {
        if (!CanGrabArm(id))
        {
            throw new Exception($"ノード{id}({_arm[id].Y},{_arm[id].X})でアイテムを掴めません");
        }

        _arm.Grab(id);

        var node = _arm[id];

        Cell before = this[node.Y, node.X];
        _categorizedCell[(before.ItemExists, before.IsDestination)].Remove(before);

        _current[node.Y, node.X] = false;
        // if (_finished.Contains((y, x)))
        // {
        //     _finished.Remove((y, x));
        //     _unfinished.Add((y, x));
        // }

        Cell after = this[node.Y, node.X];
        _categorizedCell[(after.ItemExists, after.IsDestination)].Add(after);
    }

    public bool CanPutArm(int id)
    {
        var node = _arm[id];
        (int y, int x) = (node.Y, node.X);

        if (y < 0 || y >= _n || x < 0 || x >= _n)
        {
            // throw new Exception($"ノード{id}はフィールドの範囲外に存在します");
            return false;
        }

        if (_current[y, x])
        {
            // throw new Exception($"マス({y},{x})には既にアイテムが存在します");
            return false;
        }

        return _arm.CanPut(id);
    }

    private void PutArm(int id)
    {
        if (!CanPutArm(id))
        {
            throw new Exception($"ノード{id}はアイテムを置けません");
        }

        _arm.Put(id);

        var node = _arm[id];

        Cell before = this[node.Y, node.X];
        _categorizedCell[(before.ItemExists, before.IsDestination)].Remove(before);

        _current[node.Y, node.X] = true;
        // if (_unfinished.Contains((y, x)))
        // {
        //     _unfinished.Remove((y, x));
        //     _finished.Add((y, x));
        // }

        Cell after = this[node.Y, node.X];
        _categorizedCell[(after.ItemExists, after.IsDestination)].Add(after);
    }

    public bool IsDone()
    {
        // return _unfinished.Count == 0;
        return _categorizedCell[(false, true)].Count == 0;
    }

    public bool Operate(char[] operation)
    {
        if (operation.Count(c => (c != '.')) == 0)
        {
            return false;
        }

        MoveArm(operation[0]);

        for (int i = 1; i < _arm.NodeCount; i++)
        {
            if (operation[i] != 'L' && operation[i] != 'R') continue;
            RotateArm(i, (operation[i] == 'R' ? true : false));
        }

        for (int i = 0; i < _arm.NodeCount; i++)
        {
            if (operation[_arm.NodeCount + i] == 'P')
            {
                if (!_arm[i].IsGrabbed)
                {
                    GrabArm(i);
                }
                else
                {
                    PutArm(i);
                }
            }
        }

        if (operation.All(c => c == '.' || c == 'P') && _log.Count >= 1)
        {
            bool canCompress = true;
            for (int i = 0; i < operation.Length; i++)
            {
                if (_log.Last()[i] != '.' && operation[i] == 'P')
                {
                    canCompress = false;
                    break;
                }
            }

            if (canCompress)
            {
                for (int i = 0; i < operation.Length; i++)
                {
                    if (operation[i] == 'P')
                    {
                        _log.Last()[i] = operation[i];
                    }
                }
                return true;
            }
        }

        _log.Add(operation);
        return true;
    }

    public bool Operate(string operation)
    {
        return Operate(operation.ToArray());
    }

    public override string ToString()
    {
        StringBuilder sb = new StringBuilder();

        sb.AppendLine($"Turn: {Turn}");

        sb.AppendLine("Current Field State (_current):");
        for (int y = 0; y < _n; y++)
        {
            for (int x = 0; x < _n; x++)
            {
                sb.Append(_current[y, x] ? "1 " : "0 ");
            }
            sb.AppendLine();
        }

        // sb.AppendLine("Finished Cells (_finished):");
        // foreach (var (Y, X) in _finished)
        // {
        //     sb.AppendLine($"({Y}, {X})");
        // }

        // sb.AppendLine("Unfinished Cells (_unfinished):");
        // foreach (var (Y, X) in _unfinished)
        // {
        //     sb.AppendLine($"({Y}, {X})");
        // }

        (bool ItemExists, bool IsDestination)[] ptn = new (bool, bool)[] {
            (false, false), (false, true), (true, false), (true, true)
        };
        for (int i = 0; i < ptn.Length; i++)
        {
            sb.AppendLine($"_categorizedCell[(ItemExists = {ptn[i].ItemExists}, IsDestination = {ptn[i].IsDestination})]:");
            foreach (var cell in _categorizedCell[ptn[i]])
            {
                sb.AppendLine(cell.ToString());
            }
        }

        sb.AppendLine($"Robot Arm Position: ({_arm.Y}, {_arm.X})");

        sb.AppendLine($"Robot Arm:");
        for (int i = 0; i < _arm.NodeCount; i++)
        {
            var node = _arm[i];
            sb.Append($"id: {node.Id} ");
            sb.Append($"pid: {node.ParentId ?? -1} ");
            sb.Append($"({node.Y},{node.X}) ");
            sb.Append($"IsFingertip: {node.IsFingertip} ");
            sb.AppendLine($"IsGrabbed: {node.IsGrabbed}");
        }

        sb.AppendLine("Operation Log (_log):");
        foreach (var operations in _log)
        {
            sb.AppendLine(new string(operations));
        }

        return sb.ToString();
    }

    public void PrintLog()
    {
        WriteLine(_initLog);
        foreach (var l in _log)
        {
            foreach (char c in l)
            {
                Write(c);
            }
            WriteLine();
        }
    }
}

public class Program
{
    private static int _n;
    private static int _m;
    private static int _v;
    private static bool[,] _s = new bool[0, 0];
    private static bool[,] _t = new bool[0, 0];

    public static void Main(string[] args)
    {
        new Program();
    }

    public Program()
    {
        SharedStopwatch.Start();

        // WriteReachableCell();
        // WriteLine($"{SharedStopwatch.ElapsedMilliseconds()}ms");
        // return;

        // VisualizeReachableCell();
        // WriteLine($"{SharedStopwatch.ElapsedMilliseconds()}ms");
        // return;

        // StaticData.ParseReachableCellData(true);
        // WriteLine($"{SharedStopwatch.ElapsedMilliseconds()}ms");

        Input();

        // Sample();
        // Greedy();
        Greedy2();
    }

    public void WriteReachableCell()
    {
        var arm = new RobotArm();
        arm.SetRootPosition(0, 0);

        int v = 6;
        int b = 1;
        for (int _ = 0; _ < v - 2; _++) b *= 2;

        for (int i = 1; i < v; i++)
        {
            arm.AddNode(i - 1, b);
            b /= 2;
        }
        // WriteLine(arm);

        SortedDictionary<(int Y, int X), List<int>> seen = new();
        // seen[(arm[arm.NodeCount - 1].Y, arm[arm.NodeCount - 1].X)] = new();
        // for (int _ = 0; _ < 2; _++)
        // {
        //     seen[(arm[arm.NodeCount - 1].Y, arm[arm.NodeCount - 1].X)].Add(new string('.', 2 * v).ToArray());
        // }

        char[,] ptn = {
            { '.', 'R', 'R', 'L' },
            { '.', '.', 'R', '.' },
        };

        for (int bit = 0; bit < (int)Math.Pow(4, v - 1); bit++)
        {
            var copyArm = arm.DeepCopy();
            List<char[]> operations = new();
            for (int _ = 0; _ < 2; _++) operations.Add(new string('.', 2 * v).ToArray());
            List<int> rotatePatterns = new();

            int cbit = bit;
            for (int i = 1; i < v; i++)
            {
                int j = cbit & 0b11;
                cbit >>= 2;
                rotatePatterns.Add(j);

                for (int k = 0; k < 2; k++)
                {
                    operations[k][i] = ptn[k, j];
                    if (ptn[k, j] == 'L' || ptn[k, j] == 'R')
                    {
                        copyArm.Rotate(i, (ptn[k, j] == 'R' ? true : false));
                    }
                }
            }

            int ey = copyArm[copyArm.NodeCount - 1].Y;
            int ex = copyArm[copyArm.NodeCount - 1].X;
            if (!seen.ContainsKey((ey, ex))
                || (seen[(ey, ex)].Count(x => (x == 2)) != 0
                    && operations[1].Count(x => (x == 2)) == 0))
            {
                // seen[(ey, ex)] = new()
                // {
                //     operations[0],
                //     operations[1],
                // };
                seen[(ey, ex)] = rotatePatterns;
            }
        }

        // WriteLine($"seen.Count: {seen.Count}");
        foreach (var kvp in seen)
        {
            WriteLine($"{kvp.Key.Y} {kvp.Key.X}");
            // foreach (char[] operation in kvp.Value)
            // {
            //     foreach (char c in operation)
            //     {
            //         Write(c);
            //     }
            //     WriteLine();
            // }
            foreach (int pattern in kvp.Value)
            {
                Write(pattern);
            }
            WriteLine();
        }
    }

    public void VisualizeReachableCell()
    {
        int[] dy = new int[] { -1, 0, 1, 0 };
        int[] dx = new int[] { 0, 1, 0, -1 };

        int n = 35;
        int sy = n / 2;
        int sx = n / 2;

        int[] cycle = new int[5];
        int b = 1;
        for (int i = 0; i < cycle.Length; i++)
        {
            cycle[cycle.Length - 1 - i] = b;
            b *= 2;
        }


        // HashSet<int>[,] reachableCount = new HashSet<int>[n, n];
        Dictionary<(int Y, int X), HashSet<int>> reachableCount = new();
        // for (int i = 0; i < n; i++)
        // {
        //     for (int j = 0; j < n; j++)
        //     {
        //         reachableCount[i, j] = new();
        //     }
        // }
        // reachableCount[sy, sx].Add(0);
        reachableCount[(sy, sx)] = new() { 0, };

        int v = 1;
        int maxT = 50;
        int m = 0;

        for (; v < maxT; v++)
        {
            // for (int cy = 0; cy < n; cy++)
            // {
            //     for (int cx = 0; cx < n; cx++)
            //     {
            foreach ((int cy, int cx) in reachableCount.Keys.ToArray())
            {
                // if (reachableCount[cy, cx].Contains(v - 1))
                if (reachableCount.ContainsKey((cy, cx)) && reachableCount[(cy, cx)].Contains(v - 1))
                {
                    for (int k = 0; k < 4; k++)
                    {
                        int ey = cy + dy[k] * cycle[(v - 1) % cycle.Length];
                        int ex = cx + dx[k] * cycle[(v - 1) % cycle.Length];
                        // if (ey < 0 || ey >= n || ex < 0 || ex >= n) continue;
                        // reachableCount[ey, ex].Add(v);
                        if (!reachableCount.ContainsKey((ey, ex)))
                        {
                            reachableCount[(ey, ex)] = new();
                        }
                        reachableCount[(ey, ex)].Add(v);
                    }
                }
            }
            //     }
            // }

            m = 0;
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    // if (reachableCount[i, j].Contains(v))
                    if (reachableCount.ContainsKey((i, j)) && reachableCount[(i, j)].Contains(v))
                    {
                        m++;
                    }
                }
            }

            if (m >= n * n / 2)
            {
                break;
            }
        }

        string dateStr = DateTime.Now.ToString("yyyyMMddHHmmss");
        string dir = $"VisualizeReachableCell/{dateStr}";

        for (int ct = 1; ct <= v; ct++)
        {
            StringBuilder sb = new();
            // WriteLine($"{n} {m} {v}");
            sb.AppendLine($"{n} {m} {v}");

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    // Write(reachableCount[i, j].Contains(ct) ? "1" : "0");
                    // sb.Append(reachableCount[i, j].Contains(ct) ? "1" : "0");
                    sb.Append(
                        reachableCount.ContainsKey((i, j)) && reachableCount[(i, j)].Contains(ct)
                            ? "1"
                            : "0"
                    );
                }
                // WriteLine();
                sb.AppendLine();
            }

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    if (i * n + j < m)
                    {
                        // Write("1");
                        sb.Append("1");
                    }
                    else
                    {
                        // Write("0");
                        sb.Append("0");
                    }
                }
                // WriteLine();
                sb.AppendLine();
            }

            if (!Directory.Exists(dir))
            {
                Directory.CreateDirectory(dir);
            }

            // WriteLine($"filepath: {$"{dir}/{ct}.txt"}");
            File.WriteAllText($"{dir}/{ct}.txt", sb.ToString());
        }

        StringBuilder sb2 = new();
        sb2.AppendLine($"cycle: [{string.Join(',', cycle)}]");
        File.WriteAllText($"{dir}/metadata.txt", sb2.ToString());
    }

    public void Input()
    {
        var buf = ReadLine()!.Split().Select(int.Parse).ToArray();
        (_n, _m, _v) = (buf[0], buf[1], buf[2]);

        _s = new bool[_n, _n];
        _t = new bool[_n, _n];

        for (int i = 0; i < _n; i++)
        {
            string s = ReadLine()!;
            for (int j = 0; j < _n; j++)
            {
                _s[i, j] = (s[j] == '1');
            }
        }

        for (int i = 0; i < _n; i++)
        {
            string t = ReadLine()!;
            for (int j = 0; j < _n; j++)
            {
                _t[i, j] = (t[j] == '1');
            }
        }
    }

    public void Sample()
    {
        var arm = new RobotArm();
        arm.SetRootPosition(0, 0);
        arm.AddNode(0, 1);
        arm.AddNode(1, 1);
        arm.AddNode(1, 2);

        var field = new Field(_n, _s, _t, arm);
        // WriteLine(field);

        // field.Operate("RRL...PP".ToArray());
        // WriteLine(field);

        // field.Operate("R..R..P.".ToArray());
        // WriteLine(field);

        // field.Operate("DRR...P.".ToArray());
        // WriteLine(field);

        // field.Operate("D.....PP".ToArray());
        // WriteLine(field);

        field.PrintLog();
    }

    public void Greedy()
    {
        int[] dy = new int[] { -1, 0, 1, 0 };
        int[] dx = new int[] { 0, 1, 0, -1 };

        var arm = new RobotArm();
        arm.SetRootPosition(0, 0);

        var field = new Field(_n, _s, _t, arm);

        while (!field.IsDone())
        {
            var rootNode = field[0];

            HashSet<(int Y, int X)> seen = new() { (rootNode.Y, rootNode.X), };
            Queue<(int Y, int X)> q = new();
            q.Enqueue((rootNode.Y, rootNode.X));

            (int Y, int X) targetNode = (int.MinValue, int.MinValue);
            while (q.Count >= 1)
            {
                (int cy, int cx) = q.Dequeue();
                var cell = field[cy, cx];
                if (rootNode.IsGrabbed && !cell.ItemExists && cell.IsDestination
                    || !rootNode.IsGrabbed && cell.ItemExists && !cell.IsDestination)
                {
                    targetNode = (cy, cx);
                    break;
                }

                for (int i = 0; i < 4; i++)
                {
                    int ey = cy + dy[i];
                    int ex = cx + dx[i];
                    if (ey < 0 || ey >= field.N || ex < 0 || ex >= field.N) continue;
                    if (seen.Contains((ey, ex))) continue;
                    seen.Add((ey, ex));
                    q.Enqueue((ey, ex));
                }
            }

            int distanceY = Math.Abs(rootNode.Y - targetNode.Y);
            char moveDirectionY = (rootNode.Y > targetNode.Y ? 'U' : 'D');
            for (int i = 0; i < distanceY; i++)
            {
                field.Operate(new char[] { moveDirectionY, '.', });
            }

            int distanceX = Math.Abs(rootNode.X - targetNode.X);
            char moveDirectionX = (rootNode.X > targetNode.X ? 'L' : 'R');
            for (int i = 0; i < distanceX; i++)
            {
                field.Operate(new char[] { moveDirectionX, '.', });
            }

            field.Operate(new char[] { '.', 'P', });
        }

        field.PrintLog();
    }

    public void Greedy2()
    {
        int[] dy = new int[] { -1, 0, 1, 0 };
        int[] dx = new int[] { 0, 1, 0, -1 };
        char[,] ptn = {
            { '.', 'R', 'R', 'L' },
            { '.', '.', 'R', '.' },
        };

        bool isNodeCountFive = _v <= 5 || _n <= 16;

        var arm = new RobotArm();
        arm.SetRootPosition(_n / 2, _n / 2);

        int b = (isNodeCountFive ? 8 : 16);
        for (int i = 1; i < (isNodeCountFive ? 5 : 6); i++)
        {
            arm.AddNode(i - 1, b);
            b /= 2;
        }

        StaticData.ParseReachableCellData(isNodeCountFive);

        var field = new Field(_n, _s, _t, arm);
        // WriteLine(field);

        while (!field.IsDone() && SharedStopwatch.ElapsedMilliseconds() <= 2900)
        {
            var root = field[0];
            var fingertip = field[arm.NodeCount - 1];

            if (0 <= fingertip.Y && fingertip.Y < field.N
                && 0 <= fingertip.X && fingertip.X < field.N
                && (
                    (fingertip.IsGrabbed && !field[fingertip.Y, fingertip.X].ItemExists && field[fingertip.Y, fingertip.X].IsDestination)
                    || (!fingertip.IsGrabbed && field[fingertip.Y, fingertip.X].ItemExists && !field[fingertip.Y, fingertip.X].IsDestination)
                ))
            {
                char[] operation0 = new string('.', 2 * arm.NodeCount).ToArray();
                operation0[operation0.Length - 1] = 'P';
                field.Operate(operation0);

                continue;
            }

            (int Y, int X) target = (int.MinValue, int.MinValue);
            var targetCandidate = (fingertip.IsGrabbed
                ? field.GetCategorizedCell(false, true)
                : field.GetCategorizedCell(true, false));
            foreach (var candidate in targetCandidate)
            {
                int relativeTargetY = candidate.Y - root.Y;
                int relativeTargetX = candidate.X - root.X;
                if (StaticData.CellToRotatePatterns.ContainsKey((relativeTargetY, relativeTargetX)))
                {
                    target = (relativeTargetY, relativeTargetX);
                    break;
                }
            }

            if (target.Y != int.MinValue)
            {
                char[] operation1 = new String('.', 2 * arm.NodeCount).ToArray();
                char[] operation2 = new String('.', 2 * arm.NodeCount).ToArray();

                int[] rotatePatterns = StaticData.CellToRotatePatterns[(target.Y, target.X)];
                for (int i = 1; i < arm.NodeCount; i++)
                {
                    int pattern = 0;
                    int checkPattern = field[i].RotatePattern;

                    while (checkPattern != rotatePatterns[i - 1])
                    {
                        pattern++;
                        checkPattern = (checkPattern + 1) % 4;
                    }

                    operation1[i] = ptn[0, pattern];
                    operation2[i] = ptn[1, pattern];
                }

                field.Operate(operation1);
                field.Operate(operation2);

                continue;
            }

            int minDistance = int.MaxValue;
            foreach (var candidate in targetCandidate)
            {
                int relativeTargetY = candidate.Y - root.Y;
                int relativeTargetX = candidate.X - root.X;
                int distance = relativeTargetY + relativeTargetX;

                if (distance < minDistance)
                {
                    minDistance = distance;
                    target = (relativeTargetY, relativeTargetX);
                }
            }

            char[] operation = new String('.', 2 * arm.NodeCount).ToArray();
            if (target.Y < 0) operation[0] = 'U';
            else if (target.Y > 0) operation[0] = 'D';
            else if (target.X < 0) operation[0] = 'L';
            else operation[0] = 'R';
            field.Operate(operation);
        }

        // WriteLine(field);
        field.PrintLog();
    }
}
